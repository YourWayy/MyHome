'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

var Star = /** @class */ (function () {
    function Star(x, y, maxSpeed) {
        this.width = 0.5;
        this.x = x;
        this.y = y;
        this.slope = y / x;
        this.opacity = 0;
        this.speed = Math.max(Math.random() * maxSpeed, 1);
    }
    return Star;
}());
Star.prototype.createStar = function (x, y, maxSpeed) {
    this.width = 0.5;
    this.x = x;
    this.y = y;
    this.slope = y / x;
    this.opacity = 0;
    this.speed = Math.max(Math.random() * maxSpeed, 1);
    return this;
};
Star.prototype.distanceTo = function (originX, originY) {
    return Math.sqrt(Math.pow(originX - this.x, 2) + Math.pow(originY - this.y, 2));
};
Star.prototype.resetPosition = function (_x, _y, _maxSpeed) {
    this.x = _x;
    this.y = _y;
    this.opacity = 0;
    this.maxSpeed = _maxSpeed;
    return this;
};

/**
 * StarField
 * @param {sizeMe} containerSize size of the container
 * @param {scale} number upscale canvas drawing
 */
var StarField = /** @class */ (function () {
    function StarField(state, scale, starColor) {
        this.canvasWidth = state.containerWidth / scale;
        this.canvasHeight = state.containerHeight / scale;
        this.stars = [];
        this.scale = scale;
        this.starColor = starColor;
        return this;
    }
    return StarField;
}());
/**
 * Star Factory
 * @type {Object}
 */
var StarFactory = {
    /**
     * Returns a random star within a region of the space.
     *
     * @param  {number} minX coordinate of the region
     * @param  {number} minY coordinate of the region
     * @param  {number} maxX coordinate of the region
     * @param  {number} maxY coordinate of the region
     *
     * @return {Star} The random star
     */
    getRandomStar: function (minX, minY, maxX, maxY, maxSpeed) {
        var coords = StarFactory.getRandomPosition(minX, minY, maxX, maxY);
        return new Star(coords.x, coords.y, maxSpeed);
    },
    /**
     * Gets a random (x,y) position within a bounding box
     *
     *
     * @param  {number} minX coordinate of the region
     * @param  {number} minY coordinate of the region
     * @param  {number} maxX coordinate of the region
     * @param  {number} maxY coordinate of the region
     *
     * @return {Object} An object with random {x, y} positions
     */
    getRandomPosition: function (minX, minY, maxX, maxY) {
        return {
            x: Math.floor((Math.random() * maxX) + minX),
            y: Math.floor((Math.random() * maxY) + minY)
        };
    }
};
StarField.prototype._updateStarField = function () {
    var i, star, randomLoc, increment;
    for (i = 0; i < this.numStars; i++) {
        star = this.stars[i];
        increment = Math.min(star.speed, Math.abs(star.speed / star.slope));
        star.x += (star.x > 0) ? increment : -increment;
        star.y = star.slope * star.x;
        star.opacity += star.speed / 150;
        star.opacity += star.speed / 150;
        if ((Math.abs(star.x) > this.canvasWidth / 2) ||
            (Math.abs(star.y) > this.canvasHeight / 2)) {
            randomLoc = StarFactory.getRandomPosition(-this.canvasWidth / 10, -this.canvasHeight / 10, this.canvasWidth / 5, this.canvasHeight / 5);
            star.resetPosition(randomLoc.x, randomLoc.y, this.maxStarSpeed);
        }
    }
};
/**
 * Init scene by resizing the canvas to the appropriate value, and
 * set up main loop
 * @param {int} numStars Number of stars in our starfield
 */
StarField.prototype._initScene = function (numStars) {
    var i;
    for (i = 0; i < numStars; i++) {
        try {
            this.stars.push(StarFactory.getRandomStar(-this.canvasWidth / 2, -this.canvasHeight / 2, this.canvasWidth, this.canvasHeight, this.maxStarSpeed));
        }
        catch (_a) {
        }
    }
};
/**
 * Start Everything
 * @param {int} numStars Number of stars to render
 * @param {int} maxStarSpeed maximum star speed
 */
StarField.prototype.render = function (numStars, maxStarSpeed) {
    this.numStars = numStars;
    this.maxStarSpeed = maxStarSpeed;
    this._initScene(this.numStars);
};

var raf = require('raf');
var BigBangStarField = /** @class */ (function (_super) {
    __extends(BigBangStarField, _super);
    function BigBangStarField(props) {
        var _this = _super.call(this, props) || this;
        _this._tick = function () {
            _this.starField._updateStarField();
            _this._draw();
            _this._tickRaf = raf(_this._tick);
        };
        _this.containerRef = React.createRef();
        _this.canvasRef = React.createRef();
        if (typeof (window) == 'undefined')
            global.window = new Object();
        _this.state = { containerWidth: 0, containerHeight: 0 };
        _this.updateContainerDimensions = _this.updateContainerDimensions.bind(_this);
        return _this;
    }
    BigBangStarField.prototype.componentDidMount = function () {
        this.ctx = this.canvasRef.current.getContext('2d');
        this.state = { containerWidth: this.containerRef.current.offsetWidth, containerHeight: this.containerRef.current.offsetHeight };
        this.starField = new StarField(this.state, this.props.scale, this.props.starColor);
        this.starField.render(this.props.numStars, this.props.maxStarSpeed);
        this.updateContainerDimensions();
        window.addEventListener('resize', this.updateContainerDimensions);
        this._tick();
    };
    BigBangStarField.prototype.componentWillUnmount = function () {
        raf.cancel(this._tickRaf);
        window.removeEventListener('resize', this.updateContainerDimensions);
    };
    BigBangStarField.prototype.updateContainerDimensions = function () {
        this.state = { containerWidth: this.containerRef.current.offsetWidth, containerHeight: this.containerRef.current.offsetHeight };
        this.starField.state = this.state;
        this.canvasRef.current.height = this.state.containerHeight;
        this.canvasRef.current.width = this.state.containerWidth;
        this.starField.canvasWidth = this.state.containerWidth / this.props.scale;
        this.starField.canvasHeight = this.state.containerHeight / this.props.scale;
        this.ctx.scale(this.props.scale, this.props.scale);
    };
    BigBangStarField.prototype.render = function () {
        var _a = this.props, numStars = _a.numStars, maxStarSpeed = _a.maxStarSpeed, size = _a.size, scale = _a.scale, style = _a.style, starColor = _a.starColor, rest = __rest(_a, ["numStars", "maxStarSpeed", "size", "scale", "style", "starColor"]);
        var div = React.createElement(React.Fragment, null,
            React.createElement("div", __assign({ className: 'BigBangStarFieldContainer', ref: this.containerRef, style: __assign({ width: '100%', height: '100%', overflow: 'hidden' }, style) }, rest),
                React.createElement("canvas", { ref: this.canvasRef, width: this.state.containerWidth, height: this.state.containerHeight })));
        return div;
    };
    BigBangStarField.prototype._draw = function () {
        var ctx = this.ctx;
        var starField = this.starField;
        var i, star;
        var width = starField.canvasWidth;
        var height = starField.canvasHeight;
        ctx.clearRect(0, 0, width, height);
        for (i = 0; i < starField.numStars; i++) {
            star = starField.stars[i];
            ctx.fillStyle = "rgba(" + starField.starColor + ", " + star.opacity + ")";
            ctx.beginPath();
            ctx.arc(star.x + width / 2, star.y + height / 2, star.width, 0, 2 * Math.PI, true);
            /** this is might expensive
             ctx!.shadowColor = '#00ff00';
             ctx!.shadowBlur = 20;
             ctx!.shadowOffsetX = 0;
             ctx!.shadowOffsetY = 0;
             **/
            ctx.fill();
            ctx.closePath();
        }
    };
    BigBangStarField.defaultProps = {
        numStars: 333,
        maxStarSpeed: 1,
        scale: 4,
        style: {},
        starColor: "217, 130, 244"
    };
    return BigBangStarField;
}(React.PureComponent));

exports.default = BigBangStarField;
//# sourceMappingURL=index.js.map
